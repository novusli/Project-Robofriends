{"version":3,"sources":["registerServiceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Card","name","email","username","className","alt","src","CardList","robots","map","user","i","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","hasError","errorInfo","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","rootElement","document","getElementById","ReactDOM","render","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.074d0bae.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name, email, username}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='robots' src={`https://robohash.org/${username}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2> { name }</h2>\r\n\t\t\t\t<p>{ email }</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t// Test ErrorBoundry\r\n\t// if(true) {\r\n\t// \tthrow new Error('NOOOO!');\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i) =>{\t\t\t\t\t//user here is every element in { robots }, i is the index for every element\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={i} \t\t\t\t\t\t\t\t\t\t//key help React identify which items have changed, are added, or are removed\r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\tusername={robots[i].username} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n// searchfield is not used\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\tclassName='pa3 na n--green bg-light-blue' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange} \r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'700px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Ooops. There is an error.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\t\t\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\t// console.log(this.props.store.getState())\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// .then(response => response.json())\r\n\t\t// .then(users => this.setState({robots: users}))\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t// function inside of a component, use arrow function so that 'this' may refer to 'App' instead of the function itself\r\n\t\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\t// includes () determines if a string contains the characters of a specific string.\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn isPending?\r\n\t\t\t<h1>Loading</h1>:\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Search Your Robot</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={ filteredRobots } />\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n        type: CHANGE_SEARCH_FIELD,\n        // payload is whatever data is needed to go on to the reducer\n        payload: text\n})\n\n\n\nexport const requestRobots = () => ( dispatch ) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\n// Reducer\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    // console.log(action.type);\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            // New state\n            // The third param is whatever we want to change in that object\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducer';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore( rootReducer, applyMiddleware(thunkMiddleware, logger) )\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n    // Provider API makes the store available to the App\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    rootElement\n)\n\nregisterServiceWorker();\n// ServiceWorker.unregister();"],"sourceRoot":""}